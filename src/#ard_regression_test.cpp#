#include <iostream>
// Includes all relevant components of mlpack.

#include <math.h>
#include <ctime>

#include <mlpack/core/data/load.hpp>
#include <mlpack/core/kernels/linear_kernel.hpp>



#define BOOST_TEST_DYN_LINK 
#define BOOST_TEST_MODULE Mytest
#include <boost/test/unit_test.hpp>


#include "rvmr.hpp"
#include "utils.hpp"
// Convenience.
using namespace mlpack;
using namespace rvmr;


BOOST_AUTO_TEST_CASE(RVMegressionTest)
{
  // First, load the data.
  arma::mat Xtrain, Xtest;
  arma::rowvec ytrain, ytest;
  double RMSETRAIN = 0.112415, RMSETEST = 0.171325;

  // The RMSE are set according to the results obtained by the current
  // implementation on the following dataset.
  // y = Xw + noise, noise->Normal(0,1/beta), where beta=40 is the
  // precision and w is a sparse vector to recover with the ten first elements
  // non zero.

  std::cout<< "Synthetic dataset.\n" 
  	   << "Only the first ten features are non equal to 0."
  	   << std::endl;
  data::Load("./data/synth_train.csv", Xtrain, false, true);  
  data::Load("./data/synth_test.csv", Xtest, false, true);  
  data::Load("./data/synth_y_train.csv", ytrain, false, true);
  data::Load("./data/synth_y_test.csv", ytest, false, true);  

  // Instanciate and train the estimator.
  // No matter the kernel in the ARD regression case. 
  RVMR<kernel::LinearKernel> estimator(true, false);
  estimator.Train(Xtrain, ytrain);

  // Check if the RMSE are still equal to the previously fixed values.
  BOOST_REQUIRE_SMALL(estimator.Rmse(Xtrain,ytrain) - RMSETRAIN, 0.05);
  BOOST_REQUIRE_SMALL(estimator.Rmse(Xtest,ytest) - RMSETEST, 0.05);

  // RMSETRAIN = 0.112415;
  // RMSETEST = 0.171325;


  
}
